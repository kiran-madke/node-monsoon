$(window).on('load', function() {
    loadDataFile('');
});

function toggleDecisionBtn(t, e, n) { for (var o = 0; o < e.length; o++) { var i = e[o].id;
        0 === o ? $("#" + i).change(DecisionButtonStyles.LEFT_BUTTON_STYLE) : o === e.length - 1 ? $("#" + i).change(DecisionButtonStyles.RIGHT_BUTTON_STYLE) : $("#" + i).change(DecisionButtonStyles.CENTER_BUTTON_STYLE) }
    $("#" + t).change(n) }

function addFollowUpBox(t) { var e = addOuterDiv(t),
        n = addInfoText(t); return t.boxType !== BoxTypes.DECISION_STARTING_POINT && t.boxType !== BoxTypes.DECISION_GOING_THROUGH || n.appendChild(getButtonRow(t)), e.appendChild(n), e }

function getBoxInfo(t) { for (var e = "", n = 0; n < text.length; n++)
        if (text[n].boxId === t) { e = text[n]; break }
    return e }

function addOuterDiv(t) { var e = document.createElement("div"); return e.setAttribute("id", t.boxId), e.setAttribute("class", t.boxType + Dimensions.OUTER), e }

function addInfoText(t) { var e = document.createElement("div");
    e.setAttribute("class", t.boxType + Dimensions.INNER); var n = document.createElement("p"); return n.setAttribute("class", StyleClass.MINFO_TEXT1), n.innerHTML = t.infoText, e.appendChild(n), e }

function getBoxArray(t) { var e = 0,
        n = [];
    do n.push(t), t.boxType === BoxTypes.DECISION_STARTING_POINT || t.boxType === BoxTypes.DECISION_GOING_THROUGH || t.boxType === BoxTypes.CLINICAL_CONDITION_EXIT_BOX || t.boxType === BoxTypes.ACTIVITY_EXIT_BOX ? e = 1 : "" !== t.nextBox && "undefined" != typeof t.nextBox ? (e = 0, t = getBoxInfo(t.nextBox)) : e = 1; while (1 !== e); return n }

function getButtonRow(t) { for (var e = document.createElement("table"), n = t.buttons.length, o = getButtonsFormation(n), i = 0, a = 0, r = 0; a < o.length; a++, r++) { for (var d = document.createElement("tr"), c = 0; c < o[r]; c++, i++) { var u = new constructButton(t, i, o, r);
            0 === i && 1 === o.length ? u.addLeftButton() : 0 === i && o.length > 1 ? u.addTopLeftButton() : c === o[r] - 1 && 0 === r && o.length > 1 ? u.addTopRightButton() : r === o.length - 1 && o.length > 1 && 0 === c ? u.addBottomLeftButton() : i === n - 1 && 1 === o.length ? u.addRightButton() : i === n - 1 ? u.addBottomRightButton() : i > 0 && 0 === r && c < o[r] - 1 && o.length > 1 ? u.addTopCenterButton() : r === o.length - 1 && o.length > 1 && c > 0 && i < n - 1 ? u.addBottomCenterButton() : r > 0 && 0 === c && o.length > 1 ? u.addLeftCenterButton() : r > 0 && c === o[r] - 1 && o.length > 1 ? u.addRightCenterButton() : r > 0 && c < o[r] - 1 && o.length > 1 ? u.addCenterCenterButton() : u.addCenterButton(), d.appendChild(u.getButton()) }
        e.appendChild(d) } return e }

function loadDataFile(t) { var e, n = document.getElementById("mainDiv"); if ("" === t) { var o = 0; if (0 === o) try { e = text[o], o++ } catch (t) { var i = new exception("Algorithm Data file not found", t);
            i.displayMessage() }
        for (var a = getBoxArray(e), r = 0; r < a.length; r++) n.appendChild(addFollowUpBox(a[r])) } else try { for (var d = JSON.parse(t), c = 0; c < d.length; c++)
            if (e = getBoxInfo(d[c].id), "undefined" != typeof n && null !== n) { n.appendChild(addFollowUpBox(e)); var u = "#" + e.boxId; if ($(u).css("display", "none"), $(u).slideDownBox(Scroll.LENGTH_SHORT), (e.boxType === BoxTypes.DECISION_STARTING_POINT || e.boxType === BoxTypes.DECISION_GOING_THROUGH) && "" !== d[c].eventAction) { var s = document.getElementById(d[c].eventAction).parentNode.parentNode.childNodes,
                        l = getAllButtons(s);
                    toggleDecisionBtn(d[c].eventAction, l, 0) } } } catch (t) { var T = new exception("Algorithm history string parsing exception", t);
        T.displayMessage() }
    return "algorithm" === document.title.toLowerCase() && addFooter(), !0 }

function saveHistory() { isEdited = !1; for (var t = [], e = document.getElementById("mainDiv").childNodes, n = 0; n < e.length; n++) { var o = getBoxInfo(e[n].id); if (o.boxType === BoxTypes.DECISION_STARTING_POINT || o.boxType === BoxTypes.DECISION_GOING_THROUGH) { for (var i, a = !1, r = 0; r < o.buttons.length; r++)
                if (i = "box" + o.boxId + "_" + r, "rgb(204, 61, 68)" === document.getElementById(i).style.backgroundColor) { a = !0; break }
            a ? t.push({ id: o.boxId, eventAction: i }) : t.push({ id: o.boxId, eventAction: "" }) } else o.boxType === BoxTypes.FOOTER || t.push({ id: o.boxId }) } return JSON.stringify(t) }

function sendHistory() { Android.saveData(saveHistory()) }

function isToolEdited() { return isEdited }

function addFooter() { var t = document.getElementsByTagName("body")[0],
        e = document.createElement("div");
    e.setAttribute("class", StyleClass.FOOTER), e.setAttribute("id", "998"); var n = getBoxInfo("998");
    document.createElement("table"); "undefined" != typeof n.extraButtons && n.extraButtons.length > 0 && t.appendChild(addExtraButtons(n)) }

function getReferenceTextRow(t, e) { var n = document.createElement("tr"),
        o = document.createTextNode(t.referenceText),
        i = document.createElement("p");
    i.setAttribute("class", StyleClass.TEXT_LEFT), i.innerHTML = o.data; var a = document.createElement("div");
    a.setAttribute("class", StyleClass.REFERENCE_BOX), a.appendChild(i); var r = document.createElement("td"); return r.setAttribute("colspan", (e / 1).toString()), r.appendChild(a), n.appendChild(r), n }

function getAbbreviationTextRow(t, e) { var n = document.createElement("tr"),
        o = document.createTextNode(t.abbreviationText),
        i = document.createElement("p");
    i.setAttribute("class", StyleClass.TEXT_LEFT), i.innerHTML = o.data; var a = document.createElement("div");
    a.setAttribute("class", StyleClass.REFERENCE_BOX), a.appendChild(i); var r = document.createElement("td"); return r.setAttribute("colspan", (e / 1).toString()), r.appendChild(a), n.appendChild(r), n }

function addResetButton(t) { var e = document.createElement("div"),
        n = document.createElement("button");
    n.setAttribute("class", StyleClass.RESET_BUTTON), n.setAttribute("id", "resetButton"); var o = document.createTextNode(t.resetButtonText); return n.innerHTML = o.nodeValue, e.appendChild(n), e }

function addExtraButtons(t) { var e = t.extraButtons,
        n = document.createElement("div");
    n.setAttribute("class", "footer-div"), n.setAttribute("id", "998"); var o = getColspanFactor(e),
        i = document.createElement("table");
    i.setAttribute("class", "footer-button-table"); for (var a = 0; a < e.length; a++) i.appendChild(getExtraButtonRow(e[a], o)); return t.hasAbbreviation && i.appendChild(getAbbreviationTextRow(t, o)), t.hasFootnote && i.appendChild(getReferenceTextRow(t, o)), n.appendChild(i), n }

function getExtraButtonRow(t, e) { for (var n = document.createElement("tr"), o = t.buttonRow, i = makeSizer(o.length), a = e / o.length, r = 0; r < o.length; r++) { var d = document.createElement("td");
        d.setAttribute("class", "footer-button"), d.setAttribute("colspan", a.toString()), d.style.width = i, d.appendChild(getFooterButton(o[r])), n.appendChild(d) } return n }

function getFooterButton(t) { var e = document.createElement("button");
    e.setAttribute("class", "mfooter-button"), e.setAttribute("id", t.buttonId); var n = Object.keys(t); if (0 === n.indexOf("image")) { var o = document.createElement("img");
        o.setAttribute("id", "algoPdf"), o.setAttribute("src", "algo_pdf_white.png"), o.setAttribute("alt", "Static version"), e.appendChild(o); var i = document.createElement("a"); return i.setAttribute("href", "flipView"), i.appendChild(e), i } return e.innerHTML = document.createTextNode(t.text).data, e }

function makeSizer(t) { return 100 / t + "%" }

function getColspanFactor(t) { for (var e = 1, n = 0; n < t.length; n++) e *= t[n].buttonRow.length; return e }

function getButtonsFormation(t) { var e = { 2: [2], 3: [3], 4: [2, 2], 5: [3, 2], 6: [3, 3], 7: [3, 2, 2], 8: [3, 3, 2], 9: [3, 3, 3], 10: [3, 3, 2, 2], 11: [3, 3, 3, 2], 12: [3, 3, 3, 3] }; return e[t] }

function getAllButtons(t) { for (var e = [], n = 0; n < t.length; n++)
        for (var o = t[n].childNodes.length, i = 0; i < o; i++) e.push(t[n].childNodes[i]); return e }

function addStaticAssets() { var t = document.getElementById("staticMainDiv"),
        e = getBoxInfo("998");
    t.appendChild(getStaticImage(e.staticImageName)), t.appendChild(addStaticFooter(e)) }

function addStaticFooter(t) { var e = document.createElement("table"); return e.appendChild(getStaticFootNoteButtonRow(t)), t.hasAbbreviation && e.appendChild(getStaticAbbreviationTextRow(t)), t.hasFootnote && e.appendChild(getStaticReferenceTextRow(t)), e }

function getStaticImage(t) { var e = document.createElement("img"); return e.setAttribute("id", "staticImage"), window.setTimeout(e.setAttribute("src", loadStaticImage()), 500), e.style.width = "100%", e }

function getStaticFootNoteButtonRow(t) { var e = document.createElement("tr"),
        n = document.createElement("td"); return n.appendChild(addStaticFlipPdfButton()), e.appendChild(n), e }

function getStaticReferenceTextRow(t) { var e = document.createElement("tr"),
        n = document.createTextNode(t.referenceText),
        o = document.createElement("p");
    o.setAttribute("class", StyleClass.TEXT_LEFT), o.innerHTML = n.data; var i = document.createElement("div");
    i.setAttribute("class", StyleClass.STATIC_REFERENCE_BOX), i.appendChild(o); var a = document.createElement("td"); return a.appendChild(i), e.appendChild(a), e }

function getStaticAbbreviationTextRow(t) { var e = document.createElement("tr"),
        n = document.createTextNode(t.abbreviationText),
        o = document.createElement("p");
    o.setAttribute("class", StyleClass.TEXT_LEFT), o.innerHTML = n.data; var i = document.createElement("div");
    i.setAttribute("class", StyleClass.STATIC_REFERENCE_BOX), i.appendChild(o); var a = document.createElement("td"); return a.appendChild(i), e.appendChild(a), e }

function addStaticFlipPdfButton() { var t = document.createElement("img");
    t.setAttribute("src", "algo.png"), t.setAttribute("class", StyleClass.PDF_IMAGE); var e = document.createElement("button");
    e.setAttribute("id", "pdf_button"), e.setAttribute("class", StyleClass.FLIP_PDF_BUTTON); var n = document.createElement("a"); return n.setAttribute("href", "flipView"), e.appendChild(t), n.appendChild(e), n }

function loadStaticImage() { var t = getBoxInfo("998"),
        e = t.staticImageName + "_portrait.png"; return window.matchMedia("(orientation: portrait)").matches ? e = t.staticImageName + "_portrait.png" : window.matchMedia("(orientation: landscape)").matches && (e = t.staticImageName + "_landscape.png"), console.log(e), e }
var isEdited = !1;
$(document).ready(function() { var t, e = !1;
    $("body").on("click", "td", function() { var e = $(this).attr("id"); if (void 0 !== e) { var n = document.getElementById(e),
                o = n.parentNode.parentNode.childNodes,
                i = getAllButtons(o);
            toggleDecisionBtn(e, i, 0); var a = n.parentNode.parentNode.parentNode.parentNode,
                r = getBoxInfo(a.id),
                d = document.getElementById(a.id); if (null !== d.nextSibling)
                for (; d.nextSibling;) mainDiv.removeChild(d.nextSibling); var c = e.split("_"),
                u = parseInt(c[1], 10),
                s = r.buttons; if ("" !== s[u].eventAction && "undefined" != typeof s[u].eventAction) { followUpBoxInfo = getBoxInfo(s[u].eventAction), boxArray = getBoxArray(followUpBoxInfo); for (var l = 0; l < boxArray.length; l++) mainDiv.appendChild(addFollowUpBox(boxArray[l])), $("#" + boxArray[l].boxId).css("display", "none").slideDownBox(Scroll.LENGTH_LONG) } else console.log("Event action on button is not assigned");
            t = saveHistory(), console.log("History on button click :" + t), isEdited = !0 } }), $("body").on("click", "button", function() { switch ($(this).attr("id")) {
            case "refButton":
                e ? ($("#refButton").removeClass("footer-button-click").addClass("mfooter-button"), $(".reference-box").slideUpBox()) : ($("#refButton").removeClass("mfooter-button").addClass("footer-button-click"), $(".reference-box").slideDownBox(Scroll.LENGTH_LONG)), e = !e; break;
            case "pdfButton":
                break;
            case "resetButton":
                e = !e; for (var t = document.getElementById("mainDiv"); t.firstChild;) t.removeChild(t.firstChild);
                document.getElementsByTagName("body")[0].removeChild(document.getElementById("998")), loadDataFile(""); break;
            case "moreInfoButton":
        } }) });
var constructButton = function(t, e, n, o) {
        function i(i) { r = document.createElement("td"); var d = t.buttons,
                c = (d.length, 1); if (n.length > 1) { for (var u = 0; u < n.length; u++) c *= Number(n[u]); var s = Number(n[o]);
                c /= s }
            r.setAttribute("class", i), r.style.width = a(n[o]), r.setAttribute("id", "box" + t.boxId + "_" + e), r.setAttribute("colspan", c); var l = document.createElement("p");
            l.setAttribute("class", StyleClass.MINFO_TEXT1); var T = t.buttons[e].text; if (void 0 !== T && "" !== T) l.innerHTML = T, r.appendChild(l);
            else try { throw "Cannot read Button text property" } catch (t) { var f = new exception("Button text property is missing or empty", t);
                f.displayMessage() } }

        function a(t) { return 100 / t + "%" } var r; return { addLeftButton: function() { i(ButtonTypes.LEFT_BUTTON) }, addTopLeftButton: function() { i(ButtonTypes.TOP_LEFT_BUTTON) }, addBottomLeftButton: function() { i(ButtonTypes.BOTTOM_LEFT_BUTTON) }, addRightButton: function() { i(ButtonTypes.RIGHT_BUTTON) }, addTopRightButton: function() { i(ButtonTypes.TOP_RIGHT_BUTTON) }, addBottomRightButton: function() { i(ButtonTypes.BOTTOM_RIGHT_BUTTON) }, addTopCenterButton: function() { i(ButtonTypes.TOP_CENTER_BUTTON) }, addBottomCenterButton: function() { i(ButtonTypes.BOTTOM_CENTER_BUTTON) }, addLeftCenterButton: function() { i(ButtonTypes.LEFT_CENTER_BUTTON) }, addRightCenterButton: function() { i(ButtonTypes.RIGHT_CENTER_BUTTON) }, addCenterCenterButton: function() { i(ButtonTypes.CENTER_CENTER_BUTTON) }, addCenterButton: function() { i(ButtonTypes.CENTER_BUTTON) }, getButton: function() { return r } } },
    exception = function(t, e) { return { displayMessage: function() { var n = document.createTextNode(t + "<br/>" + e.toString()),
                    o = document.createElement("p");
                o.setAttribute("class", StyleClass.EXCEPTION_MESSAGE), o.innerHTML = n.data, document.getElementsByTagName("body")[0].appendChild(o) } } };
const BoxTypes = { CLINICAL_CONDITION_STARTING_POINT: "clinical-condition-starting-point", DECISION_STARTING_POINT: "decision-starting-point", ACTIVITY_STARTING_POINT: "activity-starting-point", ACTIVITY_GOING_THROUGH: "activity-going-through", DECISION_GOING_THROUGH: "decision-going-through", CLINICAL_CONDITION_GOING_THROUGH: "clinical-condition-going-through", CLINICAL_CONDITION_EXIT_BOX: "clinical-condition-exit-box", ACTIVITY_EXIT_BOX: "activity-exit-box", FOOTER: "footer", PUSH_BOX: "push" },
    ButtonTypes = { LEFT_BUTTON: "left-button", RIGHT_BUTTON: "right-button", CENTER_BUTTON: "center-button", TOP_LEFT_BUTTON: "top-left-button", TOP_RIGHT_BUTTON: "top-right-button", TOP_CENTER_BUTTON: "top-center-button", BOTTOM_LEFT_BUTTON: "bottom-left-button", BOTTOM_RIGHT_BUTTON: "bottom-right-button", BOTTOM_CENTER_BUTTON: "bottom-center-button", LEFT_CENTER_BUTTON: "left-center-button", RIGHT_CENTER_BUTTON: "right-center-button", CENTER_CENTER_BUTTON: "center-center-button" },
    DecisionButtonStyles = { LEFT_BUTTON_STYLE: 1, RIGHT_BUTTON_STYLE: 2, CENTER_BUTTON_STYLE: 3 },
    Dimensions = { INNER: "-inner", OUTER: "-outer" },
    StyleClass = { MINFO_TEXT1: "minfo-text1", MINFO_TEXT_BOLD: "minfo-text-bold", ABB_BUTTON: "abb-button", PDF_IMAGE: "pdf-image", REFERENCE_BOX: "reference-box", STATIC_REFERENCE_BOX: "static-reference-box", TEXT_LEFT: "text-left", FOOTER: "footer", FLIP_PDF_BUTTON: "flip-pdf-button", EXCEPTION_MESSAGE: "exception-message", RESET_BUTTON: "reset-button" },
    Scroll = { LENGTH_SHORT: 100, LENGTH_LONG: 700 },
    FooterButtons = { PDF_BUTTON: "pdfButton", RESET_BUTTON: "resetButton", REF_BUTTON: "refButton", MORE_INFO_BUTTON: "moreInfoButton" };
window.addEventListener("orientationchange", function() { "algorithm" !== document.title.toLowerCase() && window.setTimeout(document.getElementById("staticImage").setAttribute("src", loadStaticImage()), 500) }, !1),
    function(t) { t.fn.change = function(e) { return 0 === e ? this.each(function() { t(this).css({ background: "#cc3d44", color: "white", boxShadow: "0 0 0 0 #ffffff" }) }) : 1 === e ? this.each(function() { t(this).css({ background: "#ffffff", color: "#999999", boxShadow: "0 0 0 0 #ffffff" }) }) : 2 === e ? this.each(function() { t(this).css({ background: "#ffffff", color: "#999999", boxShadow: "0 0 0 0 #ffffff" }) }) : 3 === e ? this.each(function() { t(this).css({ background: "#ffffff", color: "#999999", boxShadow: "0 0 0 0 #ffffff" }) }) : void 0 }, t.fn.scroll = function(e) { return this.each(function() { t("html, body").animate({ scrollTop: t(this).offset().top }, e) }) }, t.fn.slideUpBox = function() { return this.each(function() { t(this).slideUp("fast", function() { t(this).scroll() }) }) }, t.fn.slideDownBox = function(e) { return this.each(function() { t(this).slideDown("150", function() { t(this).scroll(e) }) }) } }(jQuery);