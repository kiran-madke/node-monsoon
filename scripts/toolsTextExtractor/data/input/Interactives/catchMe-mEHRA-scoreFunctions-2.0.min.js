$(window).on('load', function() {
    loadDataFile('');
});

function toggleDecisionBtn(e, t, r) {
    for (var n = t.length, o = 0; n > o; o++) {
        $("#" + t[o].id).change(DecisionButtonStyles.CENTER_BUTTON_STYLE);
        var l = document.getElementById(t[o].id);
        if ("undefined" != typeof l && null !== l) {
            var a = l.childNodes[0],
                s = a.childNodes.length;
            if (s > 0) {
                var i = a.style;
                i.background = "#ffffff", i.border = "1px solid #e0e0e0", i.color = "#acaeaf"
            }
        }
    }
    var d = document.getElementById(e);
    if ("undefined" != typeof d && null !== d) {
        var a = d.childNodes[0],
            s = a.childNodes.length;
        if (s > 0) {
            var i = a.style;
            i.background = "#3d6ccc", i.border = "1px solid #3d6ccc", i.color = "#ffffff"
        }
    }
}

function getBoxInfo(e) {
    for (var t = "", n = (text.length, 0); n < text.length; n++)
        if (text[n].boxId === e) { t = text[n]; break }
    return t
}

function Score(e, t, r, n) { var o = new Object; return o.toolType = e, o.boxStructure = t, o.buttonStructure = r, o.header = n, o }

function loadDataFile(e) {
    var r, t = document.getElementById("mainDiv"),
        n = 0;
    if (0 === n) try { r = text[n], metaInfo = new Score(r.toolType, r.boxStructure, r.buttonStructure, r.header), n++, "" === e && (scoreHistory = []) } catch (o) {
        var l = new exception("Score Data file not found", o);
        l.displayMessage()
    }
    return t.appendChild(getScore(metaInfo)), "" !== e && loadHistory(e), addFooter(), !0
}

function isFooterExists() {
    var e = !1,
        t = document.getElementsByClassName("footer"),
        r = document.getElementsByClassName("extra-buttons-div");
    return "undefined" != typeof t && "undefined" != typeof r && (e = !0), e
}

function getScore(e) { var t = document.createElement("div"); return t.setAttribute("class", "question-div"), "" !== e.header.headerText && e.header.options.length > 0 && t.appendChild(getHeader(e.header)), t.appendChild(getScoreTable()), (e.toolType === ToolType.RESULT_SCORE || e.toolType === ToolType.RESULT_CATEGORIES_SCORE || e.toolType === ToolType.RESULT_BOX_MEHRA) && t.appendChild(getResultTable(getBoxInfo("997"))), t }

function loadHistory(e) {
    try {
        scoreHistory = JSON.parse(e), console.log("loadHistory : " + JSON.stringify(scoreHistory));
        for (var t = scoreHistory.length, r = 0; t > r; r++) {
            var n = document.getElementById("row" + scoreHistory[r].rowIndex + "_cell" + scoreHistory[r].cellIndex);
            if (null !== n) {
                var o = n.childNodes[0],
                    l = o.childNodes.length;
                if (l > 0 && "" !== scoreHistory[r].cellIndex) {
                    var a = o.style;
                    a.background = "#3d6ccc", a.border = "1px solid #3d6ccc", a.color = "#ffffff"
                }
            }
            if (metaInfo.toolType === ToolType.RESULT_BOX_MEHRA && (generateMehraResult(scoreHistory[r].rowIndex, Number(scoreHistory[r].cellIndex) + 1, "row".concat(scoreHistory[r].rowIndex).concat("_cell").concat(scoreHistory[r].cellIndex)), "1" === scoreHistory[r].cellIndex)) break
        }
        metaInfo.toolType !== ToolType.RESULT_CATEGORIES_SCORE && metaInfo.toolType !== ToolType.RESULT_BOX_MEHRA ? generateResult() : metaInfo.toolType === ToolType.RESULT_BOX_MEHRA || restoreCategoriesResult()
    } catch (s) {
        var i = new exception("Score history string parsing exception", s);
        i.displayMessage()
    }
}

function getResultTable(e) {
    var t = e.boxType,
        r = document.createElement("div");
    if (r.setAttribute("class", "result-div"), t === ResultBoxTypes.RESULT_BOX) "" !== e.extraInformation && r.appendChild(getExtraInformation(e)), r.appendChild(getInferenceDiv(e));
    else if (t === ResultBoxTypes.RESULT_SCORE_BOX) r.appendChild(getScoreDiv(e)), "" !== e.extraInformation && r.appendChild(getExtraInformation(e)), r.appendChild(getInferenceDiv(e));
    else if (t === ResultBoxTypes.SCORE_BOX) r.appendChild(getScoreDiv(e)), "" !== e.extraInformation && r.appendChild(getExtraInformation(e));
    else if (t === ResultBoxTypes.RESULT_CATEGORIES) { for (var n = 0; n < e.categories.length; n++) r.appendChild(getCategoriesResultDiv(e, n)); "" !== e.extraInformation && r.appendChild(getExtraInformation(e)) }
    return r
}

function getExtraInformation(e) {
    var t = document.createElement("div"),
        r = document.createElement("p");
    return r.setAttribute("class", "extra-info-text"), r.innerHTML = document.createTextNode(e.extraInformation).data, t.appendChild(r), t
}

function getScoreDiv(e) {
    var t = document.createElement("table");
    t.setAttribute("class", "result-div");
    var r = document.createElement("tr"),
        n = document.createElement("p");
    n.setAttribute("class", "score-info-text"), n.appendChild(document.createTextNode("Score"));
    var o = document.createElement("td");
    o.appendChild(n), o.setAttribute("colspan", "1");
    var l = document.createElement("p");
    l.setAttribute("id", "scoreText");
    var a = document.createElement("td");
    return a.setAttribute("class", "score-text"), o.setAttribute("colspan", "1"), a.appendChild(l), r.appendChild(o), r.appendChild(a), t.appendChild(r), t
}

function getInferenceDiv(e) {
    var t = document.createElement("div");
    t.setAttribute("class", "result-div");
    var r = document.createElement("p");
    r.setAttribute("class", "result-info-text"), "undefined" != typeof e.resultInfoText ? r.innerHTML = document.createTextNode(e.resultInfoText).data : r.innerHTML = document.createTextNode("");
    var n = document.createElement("p");
    return n.setAttribute("class", "result-text"), n.setAttribute("id", "resultText"), t.appendChild(r), t.appendChild(n), t
}

function getCategoriesResultDiv(e, t) {
    var r = e.categories,
        n = document.createElement("div");
    n.setAttribute("class", "result-div");
    var o = document.createElement("p");
    o.setAttribute("class", "result-info-text"), "undefined" != typeof r[t] ? o.innerHTML = document.createTextNode(r[t]).data : o.innerHTML = document.createTextNode("");
    var l = document.createElement("p");
    return l.setAttribute("class", "result-text"), l.setAttribute("id", "category" + t), n.appendChild(o), n.appendChild(l), n
}

function getScoreTable() {
    var e = document.createElement("table");
    e.setAttribute("class", "score-table");
    for (var t = text.length, r = 1; t - 3 > r; r++) {
        var n = text[r];
        e.appendChild(getScoreRow(n, r)), scoreHistory.push({ rowIndex: r.toString(), cellIndex: "", status: "false" })
    }
    return e
}

function getScoreRow(e, t) {
    var r = document.createElement("tr");
    r.setAttribute("id", t), r.setAttribute("class", "score-row"), r.appendChild(getQuestionCell(e.infoText));
    for (var n = getMaxButtons(), o = 0; n > o; o++) {
        var l = document.createElement("td");
        l.setAttribute("class", "option-cell"), l.setAttribute("id", "row" + t + "_cell" + o);
        var a = document.createElement("p");
        "undefined" != typeof e.options[o] ? (a.innerHTML = document.createTextNode(e.options[o].text).data, a.setAttribute("class", "option-cell-text")) : (a.innerHTML = document.createTextNode("").data, a.setAttribute("class", "option-cell-empty")), l.appendChild(a), r.appendChild(l)
    }
    return r
}

function getQuestionCell(e) {
    var t = document.createElement("td");
    t.setAttribute("class", "question-cell");
    var r = document.createElement("p");
    return r.setAttribute("class", "bold-text"), r.innerHTML = document.createTextNode(e).data, t.appendChild(r), t
}

function getHeader(e) {
    var t = document.createElement("table");
    t.setAttribute("class", "header-div");
    var r = document.createElement("tr"),
        n = document.createElement("td");
    n.setAttribute("class", "question-cell");
    var o = document.createElement("p");
    o.setAttribute("class", "bold-text"), o.innerHTML = document.createTextNode(e.headerText).data, n.appendChild(o), r.appendChild(n);
    var l = e.options;
    if ("undefined" != typeof l)
        for (var a = 0; a < l.length; a++) {
            var s = document.createElement("td");
            s.setAttribute("class", "option-cell");
            var i = document.createElement("p");
            i.innerHTML = document.createTextNode(l[a].text).data, i.setAttribute("class", "header-cell-text"), s.appendChild(i), r.appendChild(s)
        }
    return t.appendChild(r), t
}

function getMaxButtons() {
    for (var e = [], t = text.length, r = 1; t - 3 > r; r++) {
        var n = text[r];
        e.push(n.options.length)
    }
    return Math.max.apply(Math, e)
}

function amendHistory(e, t, r) {
    if (0 !== t || 0 > t) {
        var n = getBoxInfo((Number(e) + 1).toString()),
            o = Number(t) - 1;
        scoreHistory[e].cellIndex = o.toString();
        for (var l = scoreHistory.length, a = 0; l > a; a++) { var s = scoreHistory[a].cellIndex; if ("" !== s && a === Number(e)) { var i = n.options[Number(s)]; "undefined" != typeof i && "-1" !== i.value ? scoreHistory[e].status = "true" : scoreHistory[e].status = "false" } }
        console.log("amendHistory : " + JSON.stringify(scoreHistory)), metaInfo.toolType !== ToolType.RESULT_CATEGORIES_SCORE && metaInfo.toolType !== ToolType.RESULT_BOX_MEHRA ? generateResult() : metaInfo.toolType === ToolType.RESULT_BOX_MEHRA ? generateMehraResult(e, t, r) : generateCategoriesResult(e, t)
    }
}

function generateMehraResult(e, t, r) {
    if ("row1_cell1" == r) {
        var n = document.getElementById("row2_cell1").firstChild;
        n.removeAttribute("style"), document.getElementById("row2_cell1").firstChild.className = "default-selected", document.getElementById("row3_cell1").firstChild.className = "default-selected", document.getElementById("row4_cell1").firstChild.className = "default-selected", document.getElementById("row2_cell1").firstChild.removeAttribute("style"), document.getElementById("row3_cell1").firstChild.removeAttribute("style"), document.getElementById("row4_cell1").firstChild.removeAttribute("style"), document.getElementById("row2_cell0").firstChild.removeAttribute("style"), document.getElementById("row3_cell0").firstChild.removeAttribute("style"), document.getElementById("row4_cell0").firstChild.removeAttribute("style"), document.getElementById("resultText").innerHTML = "No symptoms, AF does not cause any symptoms (mEHRA Score 1)", document.getElementById("2").style.pointerEvents = "none", document.getElementById("3").style.pointerEvents = "none", document.getElementById("4").style.pointerEvents = "none";
        for (var o = 1; 4 > o; o++) scoreHistory[o].cellIndex = "1", scoreHistory[o].status = "true";
        console.log("amendHistory : " + JSON.stringify(scoreHistory))
    } else "row1_cell0" == r && (document.getElementById("2").style.pointerEvents = "auto", document.getElementById("resultText").innerHTML = "", document.getElementById("row2_cell1").firstChild.className = "option-cell-text", document.getElementById("row3_cell1").firstChild.className = "option-cell-text", document.getElementById("row4_cell1").firstChild.className = "option-cell-text");
    if ("row2_cell0" == r) tempvalue = "2b", document.getElementById("3").style.pointerEvents = "auto", document.getElementById("resultText").innerHTML = "", document.getElementById("row3_cell1").firstChild.className = "option-cell-text", document.getElementById("row4_cell1").firstChild.className = "option-cell-text";
    else if ("row2_cell1" == r) {
        document.getElementById("resultText").innerHTML = "Mild symptoms, normal daily activity not affected by symptoms related to AF (mEHRA Score 2a)", document.getElementById("3").style.pointerEvents = "none", document.getElementById("4").style.pointerEvents = "none", document.getElementById("row3_cell1").firstChild.className = "default-selected", document.getElementById("row4_cell1").firstChild.className = "default-selected", document.getElementById("row3_cell1").firstChild.removeAttribute("style"), document.getElementById("row4_cell1").firstChild.removeAttribute("style"), document.getElementById("row3_cell0").firstChild.removeAttribute("style"), document.getElementById("row4_cell0").firstChild.removeAttribute("style");
        for (var o = 2; 4 > o; o++) scoreHistory[o].cellIndex = "1", scoreHistory[o].status = "true";
        console.log("amendHistory : " + JSON.stringify(scoreHistory))
    }
    if ("row3_cell0" == r) document.getElementById("4").style.pointerEvents = "auto", document.getElementById("resultText").innerHTML = "", document.getElementById("row4_cell1").firstChild.className = "option-cell-text";
    else if ("row3_cell1" == r) {
        document.getElementById("4").style.pointerEvents = "none", document.getElementById("resultText").innerHTML = "Moderate symptoms, normal daily activity not affected by symptoms related to AF, but patient troubled by symptoms (mEHRA Score 2b)", document.getElementById("row4_cell1").firstChild.className = "default-selected", document.getElementById("row4_cell1").firstChild.removeAttribute("style"), document.getElementById("row4_cell0").firstChild.removeAttribute("style");
        for (var o = 3; 4 > o; o++) scoreHistory[o].cellIndex = "1", scoreHistory[o].status = "true";
        console.log("amendHistory : " + JSON.stringify(scoreHistory))
    }
    "row4_cell0" == r ? document.getElementById("resultText").innerHTML = "Disabling symptoms, normal daily activity discontinued (mEHRA Score 4)" : "row4_cell1" == r && (document.getElementById("resultText").innerHTML = "Severe symptoms, normal daily activity affected by symptoms related to AF  (mEHRA Score 3)")
}

function restoreCategoriesResult() {
    for (var e = scoreHistory.length, t = 0; e > t; t++) {
        var r = scoreHistory[t];
        if ("0" === r.cellIndex) {
            var n = document.getElementById("category" + text[t + 1].category),
                o = n.childNodes;
            if (0 === o.length) {
                var l = document.createElement("ul");
                l.setAttribute("id", "list" + text[t + 1].category), n.appendChild(l)
            } else l = document.getElementById("list" + text[t + 1].category);
            var a = document.createElement("li");
            a.innerHTML = document.createTextNode(text[t + 1].infoText).data, l.appendChild(a)
        }
    }
}

function generateCategoriesResult(e, t) {
    console.log(e + " / " + t), console.log(JSON.stringify(scoreHistory));
    var r = text[Number(e) + 1],
        n = text[Number(e) + 1].category,
        o = document.getElementById("category" + n),
        l = o.childNodes;
    if ("Yes" === r.options[Number(t) - 1].text) {
        if (0 === l.length) {
            var a = document.createElement("ul");
            a.setAttribute("id", "list" + n), o.appendChild(a)
        } else a = document.getElementById("list" + n);
        removeListItem(l, r.infoText, n);
        var s = document.createElement("li");
        s.innerHTML = document.createTextNode(r.infoText).data, a.appendChild(s)
    } else removeListItem(l, r.infoText, n)
}

function removeListItem(e, t, r) {
    if (e.length > 0 && e[0].childNodes.length > 0)
        for (var n = e[0].childNodes, o = 0; o < n.length; o++) { var l = (new DOMParser).parseFromString(t, "text/html"); if (n[o].innerHTML === l.body.innerHTML) { document.getElementById("list" + r).removeChild(n[o]); break } }
}

function generateResult() {
    for (var e = 0; e < scoreHistory.length; e++) {
        var t = scoreHistory[e];
        if (JSON.parse(t.status) && 0 === e && "1" === t.cellIndex)
            for (var r = 2; r <= scoreHistory.length; r++) { scoreHistory[r].status = "false"; for (var n = 0; 2 > n; n++) document.getElementById("row" + r + "_cell" + n).setAttribute("disabled", !0) }
    }
    console.log(JSON.stringify(scoreHistory));
    for (var o = !1, l = scoreHistory.length, a = 0; l > a; a++) {
        if (!JSON.parse(scoreHistory[a].status)) { o = !1; break }
        o = !0
    }
    var s = getBoxInfo("997").boxType;
    if (o) {
        var i = getInference(o, s);
        if (s === ResultBoxTypes.RESULT_SCORE_BOX) {
            var d = document.getElementById("resultText");
            d.innerHTML = i[0].inferenceText;
            var c = document.getElementById("scoreText");
            c.innerHTML = i[0].scoreSum
        } else if (s === ResultBoxTypes.RESULT_BOX) {
            var d = document.getElementById("resultText");
            d.innerHTML = i[0].inferenceText
        } else if (s === ResultBoxTypes.SCORE_BOX) {
            var c = document.getElementById("scoreText");
            c.innerHTML = i[0].scoreSum
        }
    } else s === ResultBoxTypes.RESULT_SCORE_BOX ? (document.getElementById("resultText").innerHTML = "", document.getElementById("scoreText").innerHTML = "") : s === ResultBoxTypes.RESULT_BOX ? document.getElementById("resultText").innerHTML = "" : s === ResultBoxTypes.SCORE_BOX && (document.getElementById("scoreText").innerHTML = "")
}

function getInference(e, t) {
    var r = [];
    if (e) {
        for (var n = 0, o = scoreHistory.length, l = 0; o > l; l++) {
            var a = Number(scoreHistory[l].rowIndex),
                s = getBoxInfo(a.toString()),
                i = Number(scoreHistory[l].cellIndex),
                d = Number(s.options[i].value);
            n += d
        }
        t === ResultBoxTypes.RESULT_SCORE_BOX ? r.push({ inferenceText: analyzeInference(n), scoreSum: n }) : t === ResultBoxTypes.RESULT_BOX ? r.push({ inferenceText: analyzeInference(n) }) : t === ResultBoxTypes.SCORE_BOX && r.push({ scoreSum: n })
    }
    return r
}

function analyzeInference(sum) { for (var conclusion = "", range = getBoxInfo("999"), resultLength = range.result.length, item = 0; resultLength > item; item++) eval(sum + range.result[item].operator + range.result[item].value) && (conclusion = range.result[item].inference); return conclusion }

function saveHistory() { return JSON.stringify(scoreHistory) }

function sendHistory() { Android.saveData(JSON.stringify(scoreHistory)) }

function addFootnoteButton(e) { var t = document.createElement("button"); return t.setAttribute("class", StyleClass.ABB_BUTTON), t.setAttribute("id", "refButton"), t.innerHTML = document.createTextNode(e.buttonText).data, t }

function addMoreInfoButton(e) {
    var t = document.createElement("div"),
        r = document.createElement("button");
    r.setAttribute("class", StyleClass.MORE_INFO_BUTTON), r.setAttribute("id", "moreInfobutton");
    var n = document.createTextNode(e.moreInfotext);
    return r.innerHTML = n.nodeValue, t.appendChild(r), t
}

function addFlipPdfButton() {
    var e = document.createElement("img");
    e.setAttribute("src", "algo_pdf.png"), e.setAttribute("class", StyleClass.PDF_IMAGE);
    var t = document.createElement("button");
    t.setAttribute("id", "pdfButton"), t.setAttribute("class", StyleClass.FLIP_PDF_BUTTON);
    var r = document.createElement("a");
    return r.setAttribute("href", "flipView"), t.appendChild(e), r.appendChild(t), r
}

function addFooter() {
    var e = document.getElementsByTagName("body")[0],
        t = document.createElement("div");
    t.setAttribute("class", StyleClass.FOOTER), t.setAttribute("id", "998");
    var r = getBoxInfo("998"),
        n = document.createElement("table");
    (r.hasPdfButton || r.hasFootnote || r.hasAbbreviation) && n.appendChild(getFootNoteButtonRow(r)), r.hasFootnote && n.appendChild(getReferenceTextRow(r)), r.hasAbbreviation && n.appendChild(getAbbreviationTextRow(r)), r.hasMoreInfoButton && n.appendChild(getMoreInfoLinkButton(r)), "" !== r.resetButtonText.trim() && n.appendChild(getResetButton(r)), t.appendChild(n), e.appendChild(t), r.extraButtons.length > 0 && e.appendChild(addExtraButtons(r))
}

function getFootNoteButtonRow(e) {
    var t = document.createElement("tr"),
        r = document.createElement("td");
    return e.hasPdfButton && r.appendChild(addFlipPdfButton()), (e.hasFootnote || e.hasAbbreviation) && r.appendChild(addFootnoteButton(e)), t.appendChild(r), t
}

function getReferenceTextRow(e) {
    var t = document.createElement("tr"),
        r = document.createElement("p");
    r.setAttribute("class", StyleClass.TEXT_LEFT), r.innerHTML = document.createTextNode(e.referenceText).data;
    var n = document.createElement("div");
    n.setAttribute("class", StyleClass.REFERENCE_BOX), n.appendChild(r);
    var o = document.createElement("td");
    return o.appendChild(n), t.appendChild(o), t
}

function getAbbreviationTextRow(e) {
    var t = document.createElement("tr"),
        r = document.createTextNode(e.abbreviationText),
        n = document.createElement("p");
    n.setAttribute("class", StyleClass.TEXT_LEFT), n.innerHTML = r.data;
    var o = document.createElement("div");
    o.setAttribute("class", StyleClass.REFERENCE_BOX), o.appendChild(n);
    var l = document.createElement("td");
    return l.appendChild(o), t.appendChild(l), t
}

function getMoreInfoLinkButton(e) {
    var t = document.createElement("tr"),
        r = document.createElement("td");
    return r.appendChild(addMoreInfoButton(e)), t.appendChild(r), t
}

function getResetButton(e) {
    var t = document.createElement("tr"),
        r = document.createElement("td");
    return r.appendChild(addResetButton(e)), t.appendChild(r), t
}

function addResetButton(e) {
    var t = document.createElement("div"),
        r = document.createElement("button");
    r.setAttribute("class", StyleClass.RESET_BUTTON), r.setAttribute("id", "resetButton");
    var n = document.createTextNode(e.resetButtonText);
    return r.innerHTML = n.nodeValue, t.appendChild(r), t
}

function addExtraButtons(e) {
    var t = e.extraButtons,
        r = document.createElement("div");
    r.setAttribute("class", "extra-buttons-div"), r.setAttribute("id", "extraButtons");
    for (var n = 0; n < t.length; n++) {
        var o = document.createElement("table");
        o.appendChild(getExtraButtonRow(t[n])), r.appendChild(o)
    }
    return r
}

function getExtraButtonRow(e) {
    for (var t = document.createElement("tr"), r = e.buttonRow, n = makeSizer(r.length), o = 0; o < r.length; o++) {
        var l = document.createElement("td");
        var m;
        l.setAttribute("class", "extra-button"), l.style.width = n;
        var a = document.createElement("button");
        a.setAttribute("class", "mextra-button"), a.setAttribute("id", r[o].buttonId), (r[o].buttonId === "btnInfo" ? (m = document.createElement("div"), m.innerHTML = r[o].text, m = m.firstElementChild, a.innerHTML = m.innerText, m.innerHTML = "", m.appendChild(a), l.appendChild(m)) : (a.innerHTML = document.createTextNode(r[o].text).data, l.appendChild(a))), t.appendChild(l)
    }
    return t
}

function setParameters(e) {
    for (var t = JSON.parse(e), r = Object.keys(t[0]), n = 0; n < r.length; n++) {
        var o = r[n],
            l = scoreHistory[mapping[o]],
            a = t[0][o];
        "" !== a && (l.cellIndex = getSelectedCellIndex(o, a), l.status = "true")
    }
    for (var s = document.getElementById("mainDiv"); s.hasChildNodes();) s.removeChild(s.lastChild);
    var i = document.getElementById("998");
    "undefined" != typeof i && document.getElementsByTagName("body")[0].removeChild(i);
    var d = document.getElementById("extraButtons");
    "undefined" != typeof d && document.getElementsByTagName("body")[0].removeChild(d), loadDataFile(JSON.stringify(scoreHistory))
}

function makeSizer(e) { return 100 / e + "%" }
var metaInfo, scoreHistory = [],
    exception = function(e, t) {
        return {
            displayMessage: function() {
                var r = document.createTextNode(e + "<br/>" + t.toString()),
                    n = document.createElement("p");
                n.setAttribute("class", StyleClass.EXCEPTION_MESSAGE), n.innerHTML = r.data, document.getElementsByTagName("body")[0].appendChild(n)
            }
        }
    },
    tempvalue;
const DecisionButtonStyles = { LEFT_BUTTON_STYLE: 1, RIGHT_BUTTON_STYLE: 2, CENTER_BUTTON_STYLE: 3 },
    BoxStructure = { BOX_MULTI_LINE_TABULAR: "box-multi-line-tabular", BOX_MULTI_LINE_NON_TABULAR: "box-multi-line-non-tabular", BOX_SINGLE_LINE_TABULAR: "box-single-line-tabular", BOX_SINGLE_LINE_NON_TABULAR: "box-single-line-non-tabular" },
    ButtonStructure = { BUTTON_MULTI_LINE_TABULAR: "button-multi-line-tabular", BUTTON_MULTI_LINE_NON_TABULAR: "button-multi-line-non-tabular", BUTTON_SINGLE_LINE_TABULAR: "button-single-line-tabular", BUTTON_SINGLE_LINE_NON_TABULAR: "button-single-line-non-tabular" },
    ToolType = { RESULT_SCORE: "result-score", NON_RESULT_INFORMATION_SCORE: "non-result-information-score", RESULT_SLIDING_SCORE: "result-sliding-score", RESULT_CATEGORIES_SCORE: "result-categories-score", RESULT_BOX_MEHRA: "result-box-mehra" },
    ResultBoxTypes = { RESULT_BOX: "result-box", SCORE_BOX: "score-box", RESULT_SCORE_BOX: "result-score-box", RESULT_CATEGORIES: "result-categories", NONE: "none", FOOTER: "footer" },
    StyleClass = { MINFO_TEXT1: "minfo-text1", MINFO_TEXT_BOLD: "minfo-text-bold", ABB_BUTTON: "abb-button", PDF_IMAGE: "pdf-image", REFERENCE_BOX: "reference-box", TEXT_LEFT: "text-left", FOOTER: "footer", FLIP_PDF_BUTTON: "flip-pdf-button", EXCEPTION_MESSAGE: "exception-message", MORE_INFO_BUTTON: "more-info-button", RESET_BUTTON: "reset-button" },
    Scroll = { LENGTH_SHORT: 100, LENGTH_LONG: 700 };